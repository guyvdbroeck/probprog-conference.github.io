ID,Day,Title,Abstract,Authors,Emails,Track
3,Fri,Discrete-Continuous Mixtures in Probabilistic Programming: Generalized Semantics and Inference Algorithms,"Despite the recent successes of probabilistic programming languages (PPLs) in AI applications, PPLs offer only limited support for random variables whose distributions combine discrete and continuous elements. We develop the notion of {\em measure-theoretic Bayesian networks (MTBNs)} and use it to provide more general semantics for PPLs with arbitrarily many random variables defined over arbitrary measure spaces.  We develop a new general sampling algorithm, the lexicographic likelihood weighting (LLW), that is provably correct under the MTBN framework. We further integrate MTBNs into a widely used PPL system, BLOG, and verify the effectiveness of the new inference algorithm through representative examples.",Yi Wu (UC Berkeley)*; Siddharth Srivastava (Arizona State University); Nicholas Hay ; Simon S Du (Carnegie Mellon University); Stuart Russell (UC Berkeley),jxwuyi@gmail.com*; siddharths@asu.edu; nickjhay@gmail.com; ssdu@cs.cmu.edu; russell@cs.berkeley.edu,Artificial Intelligence
4,Fri,Meta-Learning MCMC Proposals,"Effective implementations of sampling-based probabilistic inference often require manually constructed, model-specific proposals. Inspired by recent progresses in meta-learning for training learning agents that can generalize to unseen environments, we propose a meta-learning approach to building effective and generalizable MCMC proposals.  We parametrize the proposal as a neural network to provide fast approximations to block Gibbs conditionals.  The learned neural proposals generalize to occurrences of common structural motifs across different models, allowing for the construction of a library of learned inference primitives that can accelerate inference on unseen models with no model-specific training required. We explore several applications including open-universe Gaussian mixture models, in which our learned proposals outperform a hand-tuned sampler, and a real-world named entity recognition task, in which our sampler yields higher final F1 scores than classical single-site Gibbs sampling.","Tongzhou Wang (Facebook AI Research); Yi Wu (UC Berkeley)*; David Moore (University of California, Berk); Stuart Russell (UC Berkeley)",tongzhou.wang.1994@gmail.com; jxwuyi@gmail.com*; davmre@gmail.com; russell@cs.berkeley.edu,Artificial Intelligence
22,Fri,Dual Probabilistic Programming,"A central theme in Probabilistic Programming (PP) is to address the problem of knowledge representation and, in particular, reverse-engineering human intelligence. How can we model expert knowledge in the most faithful way? In this article, we present Dual PP (DPP) a (mathematical) dual formulation of PP for faithful knowledge (belief) representation and inference. DPP provides  compiling, inference and updating procedures. By using an example from finance, we show how draw inferences with DPP without the need of extra model assumptions.",Alessio Benavoli (IDSIA)*,alessio@idsia.ch*,Artificial Intelligence
42,Fri,Unsupervised structure learning for graph-based probabilistic programs,"There are currently many tools for manually expressing probabilistic programs, but little work has been done on inducing probabilistic programs from observed data. We present a system for learning the structure of probabilistic programs from just a few examples of input/output pairs. First, we present a novel graph-based representation for typed, purely functional probabilistic programs. We represent programs as directed multigraphs, where nodes represent (possibly stochastic) functions, and edges represent routing of function outputs to inputs. We show that our representation is a generalization of Bayesian networks, but supports Turing-complete computation. We then extend the classical variable elimination algorithm to perform exact inference. Lastly, we present a Bayesian algorithm for learning the structure of programs from observations of their inputs and outputs. This algorithm leverages the type system to guide the search through program space. We apply our system to three tasks that require relational reasoning and combinatorial generalization, and show that our system learns reasonable latent programs from just a few observations. ",Matthew C Overlan (University of Rochester)*; Robert Jacobs (University of Rochester),m.overlan@rochester.edu*; rjacobs@ur.rochester.edu,Artificial Intelligence
60,Fri,Formalizing People's Intuitive Theory of Emotions as a Probabilistic Program,"We present a generative model of how observers think about the emotions of players in a socially-charged situation: a public, high-stakes, one-shot Prisoner's Dilemma. We extend inverse planning frameworks by using the latent mental variables inferred via inversion of a richly structured generative model of behavior to make forward predictions about how someone will react to hypothetical events, then translate the inferred situation appraisals into forward predictions about others' emotions. This generative model effectively captures people's third-party emotion attributions using a cognitively plausible architecture.",Sean Houlihan (MIT)*; Max Kleiman-Weiner (MIT); Joshua Tenenbaum (MIT); Rebecca Saxe (MIT),daeda@mit.edu*; maxkw@mit.edu; jbt@mit.edu; saxe@mit.edu,Artificial Intelligence
74,Fri,Inference Over Programs That Make Predictions,"This abstract extends on the previous work on program induction using probabilistic programming. It describes possible further steps to extend that work, such that, ultimately, automatic probabilistic program synthesis can generalise over any reasonable set of inputs and outputs, in particular in regard to text, image and video data.",Yura Perov (Babylon Health)*,yura.perov@babylonhealth.com*,Artificial Intelligence
84,Fri,Neural Theorem Proving on Natural Language,"Reasoning over ""real world"" data such as natural language text is a significant challenge for artificial intelligence, with applications to machine reading, dialogue, and question answering. Transducing text to logical forms which can be operated on is a brittle process. Operating directly on text by jointly learning representations and transformations thereof is a data-inefficient process which lacks the ability to learn and exploit general rules. Neural Theorem Provers bridge the gap between the robust world of neural networks and the general world of logical rules by representing symbols with learned dense vector representations, expressing a relaxed unification operator via a similarity function in the vector space. This opens interesting avenues for proving queries to noisy and ambiguous Knowledge Bases. In this position paper, we discuss how recent advances in this area open the door to reasoning systems over text as a first class object in theorem provers, and discuss future research directions to be attacked in the near future.",Matko Bosnjak (UCL)*; Pasquale Minervini (University College London); Andres Campero (MIT); Tim Rocktaschel (Oxford); Edward Grefenstette (DeepMind); Sebastian Riedel (UCL),matko.bosnjak@gmail.com*; p.minervini@gmail.com; campero@mit.edu; tim.rocktaeschel@gmail.com; etg@google.com; sebastian.riedel@gmail.com,Artificial Intelligence
8,Fri,Towards Lambda Abstractions for Probabilistic NetKAT,"Network programming languages and tools enable programmers to specify the intended behaviour and properties of a network in a high-level way and verify those properties. Probabilistic NetKAT is a probabilistic network programming language that allows modelling emergent properties of networks such as congestion, failure and randomised routing. Despite its high-level, declarative nature, adapting Probabilistic NetKAT to a specific network protocol still requires annoying repetition, due to its lack of abstraction facilities. We seek to improve the expressiveness of Probabilistic NetKAT by adding lambda-abstractions to the language. We propose both a suitable syntax extension and a semantics that combines quasi-Borel spaces and domain theory. To our knowledge, this is the first such combination.",Alexander Vandenbroucke (KU Leuven)*; Tom Schrijvers (KU Leuven),alexander.vandenbroucke@kuleuven.be*; tom.schrijvers@kuleuven.be,Languages and Systems
18,Fri,Bayesian Synthesis of Probabilistic Programs for Automatic Data Modeling,"We propose a new technique for automatically constructing probabilistic programs for data analysis, interpretation, and prediction. These techniques work with probabilistic domain-specific data modeling languages that capture key properties of a broad class of data generating processes, using Bayesian inference to synthesize probabilistic programs in these modeling languages given observed data. We apply the techniques to automatically synthesize probabilistic programs for time series data. We show how to analyze the structure of the synthesized programs to compute, for key qualitative properties of interest, the probability that the underlying data generating process exhibits each of these properties. Second, we translate probabilistic programs in the domain-specific language into probabilistic programs in Venture, a general-purpose probabilistic programming system. The translated Venture programs are then executed to obtain predictions of new time series data. Experimental results show that the method can accurately infer qualitative structure in real-world time series and accurately forecast new data.",Feras Saad (MIT)*,fsaad@mit.edu*,Languages and Systems
19,Fri,ArviZ: a unified library for Bayesian model criticism and visualization in Python,"ArviZ is a model criticism and visualization library that uses xarray as a data structure to allow collaboration and interoperability between modelling libraries. ArviZ currently supports converting objects from Edward, PyMC3, PyMC4, PyStan, and TensorFlow Probability into xarray datasets. These xarray datasets may then be used in any ArviZ function, allowing for analysis using multiple libraries at the same time.    The emphasis of this talk will be on the benefits of using xarray as a data structure for probabilistic programming. We use ArviZ as a demonstration, discussing the implementation of common visualization and criticism tasks on the output of a number of different probabilistic programming libraries. We will also discuss future work on encoding more data - such as priors, observed data, and diagnostics - into xarray objects, integrating ArviZ and xarray into existing libraries, as well as cross-language (R, Julia) support.","Colin Carroll (Freebird, Inc)*; Austin Rochford (Monetate, Inc)",colcarroll@gmail.com*; arochford@monetate.com,Languages and Systems
20,Fri,Human-in-the-loop Learning for Probabilistic Programming,"We present our BoostSRL system, a Java-based learning system that inductively learns probabilistic logic clauses from data. Our system is capable of learning different types of models, handling modeling of hidden data, learning with preferences from humans, scaling with large amounts of data by approximate counting and modeling temporal data. We review these capabilities briefly in this short paper.",Sriraam Natarajan (UT Dallas); Phillip Odom (Georgia Insitute of Technology)*; Tushar Khot (Allen Institute for AI); Kristian Kersting (TU Darmstadt); Jude Shavlik (UW Madison),Sriraam.Natarajan@utdallas.edu; phodom@umail.iu.edu*; tushar.v.khot@gmail.com; kersting@cs.tu-darmstadt.de; shavlik@cs.wisc.edu,Languages and Systems
28,Fri,The cplint Probabilistic Logic Programming System,"Probabilistic Logic Programming (PLP) is a probabilistic programming approach that uses logic programming as the underlying language. With respect to probabilistic programming based on imperative  or object-oriented languages, PLP offers the additional features of declarativity and ease of knowledge representation, making it a valid tool for Statistical Relational Learning and, more generally, Statistical Relational Artificial Intelligence. In fact PLP is very useful for modeling domains with complex and uncertain relationships among entities.   This paper presents the system cplint for performing inference and learning in such domains by means of Probabilistic Logic Programming. ",Fabrizio Riguzzi (Universita di Ferrara)*; Marco Alberti (University of Ferrara); Elena Bellodi (University of Ferrara); Giuseppe Cota (University of Ferrara); Evelina Lamma (University of Ferrara); Riccardo Zese (University of Ferrara),fabrizio.riguzzi@unife.it*; marco.alberti@unife.it; elena.bellodi@unife.it; giuseppe.cota@unife.it; evelina.lamma@unife.it; riccardo.zese@unife.it,Languages and Systems
30,Fri,Probabilistic Programming with Gaussian Processes,"Gaussian processes (GPs) \cite{williams2006gaussian} provide a class of powerful nonparametric models for collections of real-valued functions, can be utilised as components inside larger probabilistic models (e.g. \cite{damianou2013deep}), are strongly related to Deep Learning \cite{matthews2018gaussian}, and are exceptional in that they admit efficient exact Bayesian inference in regression problems. Standalone GP packages (e.g. \cite{rasmussen2010gaussian,GPflow2017}) and probabilistic programming languages (PPLs) with support for GPs (e.g. \cite{carpenter2017stan}) construct models through kernel composition which, while providing a large degree of flexibility, fall short of being able to straightforwardly express the full range of models that one might wish. We solve this problem by working directly in the space of processes, instead of the space of kernels, through the composition of affine transformations of simple ``primitive'' processes. We demonstrate the efficacy of our approach through two illustrative examples, discuss the computational advantages it offers, and describe ongoing work. Code is available at \href{http://www.github.com/willtebbutt/Stheno.jl}{http://www.github.com/willtebbutt/Stheno.jl}.",William Tebbutt (University of Cambridge)*; Wessel P Bruinsma (University of Cambridge); Richard Turner (University of Cambridge),wct23@cam.ac.uk*; wessel.p.bruinsma@gmail.com; ret26@cam.ac.uk,Languages and Systems
32,Fri,Probabilistic Reactive Programming,"Modeling reactive systems with uncertainty is challenging because reactive systems typically run without terminating, interact with an external environment, and evolve during execution. To facilitate the modeling of such systems, we propose a programming language that mixes features from both probabilistic and reactive languages. It can express probabilistic reactive models with complex dynamics. ",Louis Mandel (IBM Research)*; Guillaume Baudart (IBM Research); Avraham Shinnar (IBM Research); Kiran Kate (IBM Research); Martin Hirzel (IBM Research),lmandel@us.ibm.com*; guillaume.baudart@ibm.com; shinnar@us.ibm.com; kakate@us.ibm.com; hirzel@us.ibm.com,Languages and Systems
36,Fri,Watertight Probabilistic Abstractions in Python,"There are various probabilistic modeling and inference packages for Python. Unfortunately, they either put probabilistic models in Python strings and thus lack integration benefits, or have leaky abstractions and thus are hard to code or debug. This paper introduces Yaps, which overcomes these issues by reinterpreting Python syntax to give it Stan semantics.",Guillaume Baudart (IBM Research); Avraham Shinnar (IBM Research); Martin Hirzel (IBM Research)*; Louis Mandel (IBM Research),guillaume.baudart@ibm.com; shinnar@us.ibm.com; hirzel@us.ibm.com*; lmandel@us.ibm.com,Languages and Systems
40,Fri,Spreadsheet Probabilistic Programming,"Spreadsheets are simple programs. Because of this, probabilistic programming techniques can be used to perform Bayesian inversion of spreadsheet computations. What is more, existing execution engines in spreadsheet applications such as Microsoft Excel can be made to do this using only built-in functionality. We demonstrate this by developing a native Excel implementation of both particle Markov chain Monte Carlo and black-box variational inference algorithms for spreadsheet probabilistic programming. The resulting engine performs probabilistically coherent inference over spreadsheet computations, including spreadsheets with user-defined black-box functions. Spreadsheet engines that choose to integrate the functionality we describe in this paper will give their users the ability to both easily develop probabilistic models and maintain them over time by including observed data via a simple user-interface tool.  For spreadsheet end-users, this would mean having access to efficient, proven probabilistic modeling and inference - for use in all kinds of decision making under uncertainty.",Mike H Wu (Stanford University); Yura Perov (Invrea); Frank Wood (University of British Columbia); Hongseok Yang; William R Smith (Invrea), wumike@stanford.edu; yura.perov@gmail.com; fwood@cs.ubc.ca; hongseok.yang@kaist.ac.kr; billy@invrea.com,Languages and Systems
44,Fri,Combinators for Modeling and Inference,"We develop a combinator library for the Probabilistic Torch framework. Combinators are functions accept and return models.  Combinators enable compositional interleaving of modeling and inference operations, which streamlines model design and enables model-specific inference optimizations. Model combinators define a static graph from (possibly dynamic) model components. Examples of patterns that can be expressed as combinators are mixtures, state-space models, and models with global and local variables. Inference combinators preserve model structure, but alter model evaluation. Operations that we can represent as combinators include enumeration, importance sampling, resampling, and Markov chain Monte Carlo transitions. We validate our approach on variational methods for hidden Markov models.",Eli Z Sennesh (Northeastern University)*; Hao Wu (Northeastern University); Jan-Willem van de Meent (Northeastern University),esennesh@ccis.neu.edu*; wu.hao10@husky.neu.edu,Languages and Systems
46,Fri,An Extensible Architecture for Fast Programmable Inference in Probabilistic Programs,"This paper informally introduces a design proposal for a language called Gen, and shows that it is feasible to implement one variant of this design. This language provides constructs for automatically generating optimized implementations of custom inference tactics based on static analysis of the target probabilistic model.   This paper uses an example to show that Gen is more expressive than Stan, a widely used language for hierarchical Bayesian modeling. A first benchmark shows that a prototype implementation can be as fast as Stan, only $\sim$1.4x slower than a hand-coded sampler in Julia, and $\sim$7,500x faster than Venture, one of the only other probabilistic languages with support for custom inference.

Julia is a language for high-performance technical computing that also has strong support for meta-programming, making it a natural substrate for developing embedded probabilistic languages. However, the Julia package ecosystem currently lacks a mature library for scalable deep learning. In this abstract, we discuss the design and implementation of a TensorFlow extension to a lightweight probabilistic programming language embedded in Julia, called GenLite. Although the discussion is centered around GenLite and TensorFlow, the architectural principles apply to the design of other `polyglot' architectures that involve deep learning. We introduce a shallow embedded DSL for pure TensorFlow computations called TensorFlow functions, and show how to integrate these functions into reverse-mode automatic differentiation. The implementation uses the TensorFlow.jl TensorFlowJL Julia front-end to the TensorFlow C API. ",Marco Cusumano-Towner (MIT)*,imarcoam@gmail.com*,Languages and Systems
56,Fri,Leveraging conditional independence in Pyro,"When doing inference in complex probabilistic models, it can be greatly  advantageous if conditional independence structure can be exploited by the inference algorithm. We describe language constructs to declare conditional independence of random variables in a probabilistic program, in the manner of plate diagrams. We implement these constructs in the Pyro probabilistic programming language and show how they interact with the underlying tensor library, PyTorch. We describe applications to automatic data subsampling, Rao-Blackwellization, and parallelization of inference procedures.",Fritz H Obermeyer (Uber AI Labs)*; Eli Bingham (Uber AI Labs); Martin Jankowiak (Uber AI Labs); Neeraj Pradhan (Uber AI Labs); Noah Goodman (Uber AI Labs),fritz.obermeyer@gmail.com*; eli.bingham@uber.com; jankowiak@uber.com; npradhan@uber.com; ndg@uber.com,Languages and Systems
62,Fri,Effect Handling for Composable Program Transformations in Edward2,"Algebraic effects and handlers have emerged in the programming languages community as a convenient, modular abstraction for controlling computational effects. They have found several applications including concurrent programming, meta programming, and more recently, probabilistic programming, as part of Pyro's Poutines library.  We investigate the use of effect handlers as a lightweight abstraction for implementing probabilistic programming languages (PPLs). We interpret the existing design of Edward2 as an accidental implementation of an effect-handling mechanism, and extend that design to support nested, composable transformations. We demonstrate that this enables straightforward implementation of sophisticated model transformations and inference algorithms.",Dave Moore (Google)*; Maria I Gorinova (Google),davmre@google.com*; mgorinova@google.com,Languages and Systems
64,Fri,Sensitivity Analysis for Probabilistic Programs with PSense,"PSense is a system for automatic sensitivity analysis of probabilistic programs. For each parameter in a probabilistic program, the analysis answers the question: if the parameter/data value is changed by some value epsilon, how much does the posterior distribution change? The analysis is fully symbolic and exact: it produces the distance expression that is valid for all legal values of epsilon. It uses a developer-specified sensitivity metric that quantifies the change in the posterior distributions between the programs with and without the noise.",Zixin Huang (UIUC); Zhenbang Wang (UIUC); Sasa Misailovic (UIUC)*,zixinh2@illinois.edu; zw11@illinois.edu; misailo@illinois.edu*,Languages and Systems
66,Fri,Probabilistic programming for data-efficient robotics,"Many probabilistic programming languages decouple modeling and inference: the user specifies a model, and inference is delegated to an inference engine based on black-box MCMC or variational techniques. This approach has two limitations that inhibit its use in robotics. First, many robotics applications require real-time performance. Inference algorithms thus need to be optimized for each application. Second, many applications of robotics learning require combining probabilistic inference with optimization, in settings where evaluating the objective function requires costly real-world interactions. Modeling and inference must thus be integrated with Bayesian optimization techniques. We propose a design for a domain-specific probabilistic programming language for data-efficient robotics. The design prominently features (i) programmable inference, (ii) modular and structured optimization, and (iii) explicit uncertainty quantification. We argue that such a DSL could be useful for tasks such as Bayesian optimization for grasping, and learning policies for control.",Alexander Lavin (Vicarious)*; Vikash Mansinghka (MIT),alexdlavin@gmail.com*; vkm@mit.edu,Languages and Systems
70,Fri,ProbFuzz: Fuzzing Probabilistic Programming Systems,"Probabilistic programming systems (PP systems) allow developers to model stochastic phenomena and perform efficient inference on the models. The number and adoption of probabilistic programming systems is growing significantly. However, there is no prior study of bugs in these systems and no methodology for systematically testing PP systems. Yet, testing PP systems is highly non-trivial, especially when they perform approximate inference. In this paper, we characterize 118 previously reported bugs in three open-source PP systems—Edward, Pyro and Stan—and pro- pose ProbFuzz, an extensible system for testing PP systems. Prob- Fuzz allows a developer to specify templates of probabilistic models, from which it generates concrete probabilistic programs and data for testing. ProbFuzz uses language-specific translators to generate these concrete programs, which use the APIs of each PP system. ProbFuzz finds potential bugs by checking the output from running the generated programs against several oracles, including an accu- racy checker. Using ProbFuzz, we found 67 previously unknown bugs in recent versions of these PP systems. Developers already accepted 51 bug fixes that we submitted to the three PP systems, and their underlying systems, PyTorch and TensorFlow.",Saikat Dutta (UIUC)*; Owolabi Legunse (UIUC); Zixin Huang (UIUC); Sasa Misailovic (UIUC),saikatd2@illinois.edu*; legunse2@illinois.edu; zixinh2@illinois.edu; misailo@illinois.edu,Languages and Systems
6,Fri,Generation of BUGS,See download. Possible poster. Not sure which track. Would concentrate on multi core implementation of MCMC.,Andrew - Thomas (MRC)*,helsinkiant@gmail.com*,Practice
14,Fri,Reactive Probabilistic Programming,"Reactive programming allows a user to model the flow of a program for event-driven streams of data without explicitly stating its control flow. However, many domains are inherently uncertain and observations (the data) might ooze with noise. Probabilistic programming has emerged as the go-to technique to handle such uncertain domains. Therefore, we introduce the concept of reactive probabilistic programming, which allows to unify the methods of reactive programming and probabilistic programming. Herewith, we broaden the scope of probabilistic programming to event-driven data.",Pedro Zuidberg Dos Martires (KU Leuven)*; Sebastijan Dumancic (KU LEUVEN),pedro.zuidbergdosmartires@cs.kuleuven.be*; sebastijan.dumancic@cs.kuleuven.be,Practice
24,Fri,Forecasting a Stock's Remaining Intraday Volume,"We present a Bayesian time series model to forecast the posterior distributions of a financial equity's remaining intraday trading volume. Knowing this quantity is of strategic importance to institutional investors, who place large bets which can influence the stock’s price.   We jointly model the trading activity and volatility on a stock by stock basis. We use Stan to sample the exact posterior distribution of our model, and compare it against the empirical distribution of out-of-sample realized values. We find the predictions to be generally in agreement with the ground truth, and propose avenues for improvement.",Alex Constandache (Thomson Reuters); Omar Bari (Thomson Reuters)*,alex.constandache@thomsonreuters.com; omar.bari@thomsonreuters.com*,Practice
26,Fri,A small program can be a big challenge,"We tackle forecasting of pages-per-visit count of an internet article, a common metric in digital publishing. This is a relatively straightforward metric which measures how many pages of an article the visitor opened before leaving the web site. A probabilistic model for this metric involves just a couple of latent variables to infer, and is naturally represented as a probabilistic program. However, the inference must be run in real time for multiple campaigns. To achieve desired performance, we turn to  implementations of probabilistic programming languages that support efficient and scalable inference. Quite unexpectedly, we discover that those implementations  pose obstacles both to specification of the model and to the inference. We summarize our experience in a list of capabilities that a practical probabilistic programming system should possess.",David Tolpin (Offtopia)*,david.tolpin@gmail.com*,Practice
45,Fri,Detecting multivariate relationships in multivariate data by synthesizing and analyzing probabilistic programs,"Multivariate data is widespread, but analyzing it can be challenging. We have developed a novel technique that can automatically detect a broad class of multivariate relationships from multivariate data.",Ulrich Schaechtle (MIT)*,ulli@mit.edu*,Practice
49,Fri,Synthesizing probabilistic programs to predict empirical protein stability from Rosetta simulations,"A key question in protein design is ``to what degree, and in what circumstances, do in silico protein design simulations yield results that match empirical reality?'' This project explores a potential approach to resolving this problem based on probabilistic programming. The technical idea is to synthesize probabilistic programs that represent multivariate models of the correspondence (or discrepancy) between protein characteristics calculated from simulation, via the Rosetta software, and with empirical measurements. The test problem being studied is whether or not the given protein is stable. Probabilistic program synthesis is done using BayesDB , which implements Bayesian synthesis of probabilistic programs via a variant of the CrossCat technique.",Ulrich Schaechtle (MIT)*,ulli@mit.edu*,Practice
54,Fri,GATK gCNV: accurate germline copy-number variant discovery from sequencing read-depth data,"We introduce GATK gCNV, a novel algorithm and tool for the discovery of rare and common copy-number variants (CNVs) from next-generation sequencing (NGS) read-depth data. In GATK gCNV, sequencing biases are modeled via negative-binomial factor analysis, and copy-number states and genomic regions of low and high CNV activity are modeled using a hierarchical hidden Markov model (HHMM). We use automatic differentiation variational inference (ADVI) and variational message passing to infer continuous and discrete latent variables in a principled framework. We further use a deterministic annealing protocol to deal with the non-convexity of the variational objective function. Inference is implemented using the PyMC3 probabilistic programming language (PPL) and Theano. We demonstrate that GATK gCNV outperforms existing tools for CNV detection.",Mehrtash Babadi (Broad Institute)*; Samuel Lee (Broad Institute); Andrey Smirnov (Broad Institute),mehrtash@broadinstitute.org*; slee@broadinstitute.org; asmirnov@broadinstitute.org,Practice
72,Fri,Probabilistic Programming for Voucher Information Extraction,"Skanned provides integration with its Voucher Scanning (VS) system to other companies. The VS system allows extracting information—e.g., sender, recipient, total amount from accounting documents like receipts, invoices, and credit notes. This task is inherently amenable to probabilistic reasoning: vouchers vary heavily in layout and content, and it is not generally possible to deterministically cover all cases while preserving accuracy. Concretely, we discuss: * choice of and preliminary user experiences with existing probabilistic programming frameworks; * two concrete challenges in Skanned’s Voucher Scanning system; * proposed probabilistic models for the presented challenges, including preliminary results.",Ahmad Salim Al-Sibahi (University of Copenhagen/Skanned)*; Thomas Hamelryck (University of Copenhagen); Fritz Henglein (University of Copenhagen),ahmad@di.ku.dk*; thamelry@binf.ku.dk; henglein@d.iku.dk,Practice
76,Fri,Probabilistic programming in production with Infer.NET,"Probabilistic programming is becoming increasingly popular and is now widely used for data analysis. This is made possible by frameworks which abstract inference away and allow data scientists to focus on statistical modelling. However, it can be challenging to go beyond data analysis and incorporate probabilistic programming into real-time systems in business or consumer products. In this paper we review some of the probabilistic programs that we have shipped in production and analyze what framework capabilities enabled their productization.  All probabilistic programs were written using the Infer.NET framework and integrated with various Microsoft products, in collaboration with each corresponding product group. These models are Clutter – a personalized email classifier, TrueSkill – a skill rating system for online video game matchmaking, Matchbox – a general-purpose recommender, and Alexandria – a system for unsupervised knowledge base construction.  We observe that the two most important Infer.NET features for productizing the above are efficient offline inference and support for online Bayesian inference. This is because many enterprise problems operate on massive data scales and require user personalization at runtime. It is also important that the framework enabled rapid model development and could handle a sufficiently broad range of models.",Yordan Zaykov (Microsoft Research)*; Tom Minka (Microsoft); John Winn (Microsoft Research); John P Guiver (Microsoft Research),yordanz@microsoft.com*; minka@microsoft.com; jwinn@microsof.com; joguiver@microsoft.com,Practice
80,Fri,BayesDB: probabilistic programming with an SQL-like interface and built-in probabilistic program synthesis,"Multivariate data is increasingly available, but costly and di cult to search and model. Two key bottlenecks are that data science is time-consuming and data scientists are expensive. We are developing an open-source probabilistic programming platform, called BayesDB, that can answer a broad class of data science questions interactively, in seconds or minutes, without requiring statistical programming. For example, BayesDB can be used by analysts and journalists as a “multivariate data search engine” that answers questions such as what data might be anomalous and warrant further investigation. BayesDB can also be used by domain experts and policy advocates as a “virtual data science assistant” that answers questions about what empirical inferences are probably justified given the available data. Finally, BayesDB can be used by expert statisticians to reduce the time and effort required to solve complex data cleaning and predictive modeling problems. BayesDB is based on probabilistic programming. Unlike deep learning, probabilistic programming works for problems where the data is sparse, messy, and incomplete, and where answers are intrinsically uncertain. Unfortunately, most probabilistic programming systems require users to write probabilistic programs by hand. Unlike these systems, BayesDB provides a built-in Bayesian probabilistic program learning system that automatically builds probabilistic programs from multivariate data. This system is statistically conservative, so novices can safely use the programs it produces. Also, unlike neural networks, these probabilistic programs make explicit modeling assumptions, so experts can customize them when necessary.",Vikash Mansinghka (MIT)*,vkm@mit.edu*,Practice
5,Fri,Model evaluation should be a first-class citizen in probabilistic programming,"Probabilistic programming research has been typically focused on two things: modeling and inference. In this note, we argue that model evaluation deserves a similar level of attention. We make the case for why model evaluation is particularly important for probabilistic programming, and highlight the many ways in which model evaluation is easy to implement in such settings. We summarize by surveying languages and methods that implement model evaluation in interesting ways.",Alp Kucukelbir (Fero Labs / Columbia University)*; Yixin Wang (Columbia University); Dustin Tran (Columbia University); David Blei (Columbia University),alp@ferolabs.com*; yixin.wang@columbia.edu; dustin@cs.columbia.edu; david.blei@columbia.edu,Statistics
10,Fri,Faithful Inversion of Generative Models for Effective Amortized Inference,"Inference amortization methods share information across multiple posterior-inference problems, allowing each to be carried out more efficiently. Generally, they require inversion of the models' dependency structures, learning a mapping from observations to posterior parameters. Whereas existing approaches adopt heuristics to invert the dependency structure, constructing incorrect inverses, we introduce a graphical-model inversion algorithm for arbitrary generative models that (a) does not encode independence assertions absent from the model, and; (b) ensures that the inverse is a local maxima for the number of true independencies encoded. We then demonstrate that such inverses lead to better inference amortization than existing approaches.",Stefan Webb (Oxford)*; Adam Golinski (University of Oxford); Rob Zinkov (University of Oxford); N Siddharth (Unversity of Oxford); Tom Rainforth (University of Oxford); Yee Whye Teh (University of Oxford); Frank Wood (University of British Columbia),stefandwebb@gmail.com*; adamg@robots.ox.ac.uk; zinkov@robots.ox.ac.uk; nsid@robots.ox.ac.uk; twgr@robots.ox.ac.uk; y.w.teh@stats.ox.ac.uk; fwood@cs.ubc.ca,Statistics
16,Fri,Estimating mutual information using a mixture of Dirichlet,We describe an accurate and efficient way for estimating the mutual information.,"Giorgio Corani (IDSIA (Istituto Dalle Molle di Studi sull'Intelligenza Artificiale))*; Laura Azzimonti (IDSIA); Marco Zaffalon (Istituto ""Dalle Molle"" di Studi sull'Intelligenza Artificiale)",giorgio@idsia.ch*; laura@idsia.ch; zaffalon@idsia.ch,Statistics
38,Fri,Deep Probabilistic Programs for Causal Survival Analysis,"Probabilistic programming lends itself well to problems of censored data such as survival analysis, and can allow flexible model design to account for confounding effects in data. Here we present the Causal Survival Variational Autoencoder (CSVAE), a framework for estimating the treatment effect of a variable on a survival outcome given a set of noisy proxies for the confounding effect. Two different parameterisations based on the Weibull distribution and a probabilistic extension of multi-task logistic regression are used. We develop a non-trivial survival dataset based on real data, and investigate the performance of the CSVAE approach against standard survival analysis techniques.",Chris Hart (Babylon Health)*,christopher.hart@babylonhealth.com*,Statistics
58,Fri,Causal Graphs vs. Causal Programs: The Example of Conditional Branching,"We evaluate the performance of graph-based causal discovery algorithms when the generative process is a probabilistic program with conditional branching. Using synthetic experiments, we demonstrate empirically that graph-based causal discovery algorithms are able to learn accurate associational distributions for probabilistic programs with context-sensitive structure, but that those graphs fail to accurately model the effects of interventions on the programs.","Sam A Witty (University of Massachusetts, Amherst)*; David Jensen (University of Massachusetts Amherst)",switty@cs.umass.edu*; jensen@cs.umass.edu,Statistics
68,Fri,Exact Quantification of Continuity Correction Error in Probabilistic Programs,"If one thing is for certain, the future of computing is un- certainty. However, many Bayesian models are discrete and therefore highly non-smooth and non-differentiable, thus making many relevant machine learning tasks, such as op- timizing a continuously differentiable function impossible. Hence ``continualizing'' these statistical models offers huge gains by opening the door towards apply existing machine learning tools. However continualizing a program is not as simple as changing all the values to a continuous type. In this paper we analyze specific problems that arise when trying to approximate a discrete probabilistic program with a continuous one, paying special attention to the problem of optimal continuity correction, and how we can still achieve formal reasoning about the quality of these approximations. Though still in the preliminary stages, we propose an end-to-end framework which takes in a discrete probabilistic program and returns the optimally continualized version along with an exact accuracy quantification.",Jacob Laurel (University of Illinois Urbana Champaign)*,jlaurel2@illinois.edu*,Statistics
82,Fri,The Random Conditional Distribution for Higher-Order Probabilistic Inference,"We introduce the random conditional distribution to condition properties of an entire distribution rather than just its outcome. The need to condition distributional properties arises in many areas, for instance to assert that two distributions are similar; to express uncertainty over a probability; or to construct classifiers which are algorithmically fair or robust to adversarial attacks. As an operator, the random conditional distribution transforms a distributional property which is fixed into a random variable which can be conditioned, and can be implemented as primitive in probabilistic programming languages.",Zenna Tavares (MIT)*; Xin Zhang (MIT); Javier Burroni (UMass Amherst); Edgar Minasyan (MIT); Rajesh Ranganath (New York University); Armando Solar-Lezama (MIT),zenna@mit.edu*; xzhang@csail.mit.edu; jburroni@cs.umass.edu; minasyan@mit.edu; rajeshr@cims.nyu.edu; asolar@csail.mit.edu,Statistics
48,N/A,Visual Scene Understanding with Probabilistic Programming and Deep Learning for Inference,"Visual scene understanding systems aim to infer an interpretable high-level representation of an image or video that is useful for other tasks. Using supervised model-free learning algorithms to construct scene understanding systems requires a large amount of labeled data that rapidly becomes infeasible to collect as the detail and complexity of the desired latent representations grows. Recently, practitioners have addressed this problem using synthetic training data, typically obtained with simulators that use graphics renderers. However, to transfer from synthetic to real world images, domain randomization is often introduced, which increases the sample complexity of training. On the other hand, model-based `analysis by synthesis' approaches that use top-down e.g. MCMC inference in a generative model do not require training, but inference may be too slow for real-time applications. The Picture framework showed that bottom-up, data-driven proposals trained on simulated data can accelerate model-based inference in a probabilistic programming system for scene understanding. This abstract builds on Picture and proposes an architecture for model-based scene understanding systems that use deep learning to accelerate inference. We illustrate the architecture for using a body pose inference system developed on top of the GenLite probabilistic programming system. ",Marco Cusumano-Towner (MIT)*,imarcoam@gmail.com*,Artificial Intelligence
31,Sat,Auditory scene analysis as neurally-guided inference in a probabilistic program,"Inferring individual sound sources from the mixture of soundwaves that enters our ear is a central problem in auditory perception, termed auditory scene analysis (ASA). The study of ASA has uncovered a diverse set of illusions that suggest general principles underlying perceptual organization, but current models are narrowly focused. Towards a comprehensive account of ASA, we present a probabilistic program in WebPPL that samples a scene of parametric sources and the sound elements they generate. In order for the built-in Metropolis-Hastings algorithm to perform effective inference from the soundwave, we (1) transform our program, such that single-site proposals can delete sound elements or reassign them to new sources, and (2) initialize MCMC and guide proposals with a neural network. This model qualitatively accounts for perceptual judgments on a variety of classic ASA illusions, and can in some cases infer perceptually intuitive sources from naturalistic audio.",Luke Hewitt (MIT)*; Maddie Cusimano (MIT),lbh@mit.edu*; mcusi@mit.edu,Artificial Intelligence
35,Sat,Approximate Counting for Fast Inference and Learning in Probabilistic Programming,Inference and Parameter Learning inside Probabilistic Programming use an important operation that can be approximated: counting. We present an efficient approximation scheme that allows for fast counting and consequently faster inference and learning.,Mayukh Das (UT Dallas)*; Devendra Singh Dhami (UT Dallas); Kunapulli Gautam (U. Dallas); Kristian Kersting (TU Darmstadt); Sriraam Natarajan (UT Dallas),mayukh.das1@utdallas.edu*; devendra.dhami@utdallas.edu; Gautam.Kunapuli@utdallas.edu; kersting@cs.tu-darmstadt.de; Sriraam.Natarajan@utdallas.edu,Artificial Intelligence
37,Sat,SP3 – Sum Product Probabilistic Programming,"Probabilistic models provide a framework for describing abstract prior knowledge and using it to reason under uncertainty. Deep probabilistic programming languages (PPL) are a powerful tool to ease the development of probabilistic models. They let users specify generative probabilistic models as programs and then ``compile'' those models down into inference procedures.  Since probabilistic inference is still intractable, existing deep PPLs leverage deep learning for inference. The key idea is to describe inference via a second model called an inference model trained in variational fashion.  Both the generative and the inference models can include deep neural networks as components.  While the details of the employed neural architectures may differ, they typically model distributions only implicitly, i.e., they allow for sampling but not the computation of marginal probabilities. This extended abstract makes the case to not ""go down the full neural road"", but to explicitly obtain uncertainties in an arithmetic circuit manner.  To this end, sum-product networks (SPNs) are a promising option, as they are a class of probabilistic model which permit explicit uncertainties and efficient inference.  More precisely, SPNs can compute any marginalization and conditioning query in time linear of the model's representation size. Although SPNs can be described in a nutshell as ""deep mixture models"", they have received no attention in the deep PPL community, despite their attractive inference properties.",Alejandro Molina (TU Darmstadt); Karl Stelzner (TU Darmstadt); Robert Peharz (University of Cambridge); Antonio Vergari (MPI for Intelligent Systems); Martin Trapp (Austrian Research Institute for Artificial Intelligence); Isabel Valera (MPI for Intelligent Systems); Zoubin Ghahramani (University of Cambridge); Kristian Kersting (TU Darmstadt)*,molina@cs.tu-darmstadt.de; stelzner@cs.tu-darmstadt.de; rp587@cam.ac.uk; antonio.vergari@tue.mpg.de; martin.trapp@ofai.at; isabel.valera@tue.mpg.de; zoubin@eng.cam.ac.uk; kersting@cs.tu-darmstadt.de*,Artificial Intelligence
79,N/A,Deep Graphical Models for Flexible Bayesian Analysis,"A major weakness of traditional Bayesian modeling is that one is usually forced to impose stronger assumptions than desired. In particular, though one often has strong prior knowledge about the dependency relationships between variables, the exact corresponding probabilistic relationships are often not known.  Nonetheless, one is forced to specify these in the generative model, inevitably imparting unwanted assumptions on the final analysis.  In this paper, we develop a method in which the user provides dependency assumptions through specifying a graphical model, but is not required to specify the exact probabilistic relationships governing those dependencies. A model is then learned using a variational auto-encoder framework, with recent work in faithful amortized inference used to ensure the specified dependency structure is realized.",Stefan Webb (Oxford)*; Tom Rainforth (University of Oxford),stefandwebb@gmail.com*; twgr@robots.ox.ac.uk,Artificial Intelligence
7,Sat,ForneyLab.jl: Fast and flexible automated inference through message passing in Julia,"We present ForneyLab.jl, an open-source probabilistic programming toolbox written in Julia. The main motivation behind ForneyLab is to (partially) automate the construction of computationally efficient Bayesian inference algorithms in settings with streaming data and real-time requirements. ForneyLab combines a convenient syntax for specifying probabilistic models with an automatic Bayesian inference algorithm generator. Under the hood, ForneyLab uses a (Forney-style) factor graph representation of the model to automatically generate message passing-based inference algorithms such as belief propagation, variational message passing and expectation propagation. These message passing algorithms are produced as readable Julia source code that can be modified and debugged by the user before deployment.  The modular setup of the toolbox makes it easy to define custom factor nodes, message updates, and entire message passing algorithms. ",Marco Cox (Eindhoven University of Technology)*; Thijs van de Laar (Eindhoven University of Technology); Bert de Vries (Eindhoven University of Technology),m.g.h.cox@tue.nl*; t.w.v.d.laar@tue.nl; bdevries@ieee.org,Languages and Systems
13,Sat,Automatic Discovery of Static Structures in Probabilistic Programs,"Many inference algorithms that are used for probabilistic programming naturally do not perform well on all programs. One such family of algorithms is sequential Monte Carlo (SMC) methods, where particle alignment for resampling can become an issue in certain programs. We introduce a new approach to SMC in probabilistic programming, consisting of discovering static structures in programs. These static structures can be used to automatically select correctly aligned resampling locations for SMC inference.",Daniel Lundén (KTH Royal Institute of Technology)*; David Broman (KTH Royal Institute of Technology); Fredrik Ronquist (Swedish Museum of Natural History); Lawrence M. Murray (Uppsala University),dlunde@kth.se*,Languages and Systems
21,Sat,A Program Analysis Perspective on Expected Sampling Times,"We study the problem of determining the expected time to obtain a single valid sample from a Bayesian network (BN), given observed evidence. To this end, we translate the BN together with observations into a probabilistic program. We provide proof rules for probabilistic programs (beyond BNs) that yield the exact expected runtime of this program in a fully automated fashion. We implemented our approach and successfully analyzed various real-world BNs taken from the Bayesian network repository.",Kevin Batz (RWTH Aachen University); Benjamin Lucien Kaminski (RWTH Aachen University); Joost-Pieter Katoen (RWTH Aachen University); Christoph Matheja (RWTH Aachen University)*,Kevin.batz@rwth-aachen.de; benjamin.kaminski@cs.rwth-aachen.de; katoen@cs.rwth-aachen.de; matheja@cs.rwth-aachen.de*,Languages and Systems
25,Sat,Automatically Batching the No U-Turn Sampler,"We present a design for an automatic batching system for TensorFlow, that can batch through data-dependent control flow, including in the presence of recursion.",Alexey Radul (Google)*; Brian Patton (Google Inc.); Dougal Maclaurin (Google Inc.); DeLesley Hutchins (Google Inc.),axch@google.com*; bjp@google.com; dougalm@google.com; delesley@google.com,Languages and Systems
27,Sat,InferPy: An Easy-to-use Probabilistic Programming Language over TensorFlow,"InferPy is a high-level API written in Python for probabilistic modeling built on top of Edward and Tensorflow. InferPy, which is strongly inspired by Keras, focuses on being user-friendly by using an intuitive set of abstractions that make easy to deal with complex probabilistic models. It should be seen as an interface rather than a standalone machine-learning framework. In general, InferPy has the focus on enabling flexible data processing, easy-to-code probabilistic modeling, scalable inference and robust model validation.",Rafael Cabañas de Paz (University of Almería)*; Andres Masegosa (University of Almeria); Antonio Salmeron (Universidad de Almeria),rcabanas@ual.es*; andresmasegosa@ual.es; antonio.salmeron@ual.es,Languages and Systems
39,Sat,Grappa: An Extensible PPL Compiler Framework,"Probabilistic Programming Languages (PPLs) are a powerful approach to enable users without significant machine learning expertise to apply machine learning algorithms and techniques to problems in their domains of interest. PPLs separate the description of a machine learning problem – the ""what"" – from the ""how"" of the particular algorithms or techniques needed to solve the problem. The difficulty with this idea is that different inference methods – the different ""how""s --- require different back-end representations in order to be efficient. This in turn means that each PPL, which supports some different collection of inference methods and their associated back-end representations, is a different language, with different restrictons and, sometimes, very different syntax and semantics. Thus, not only must users rewrite their machine learning problems in different languages if they want to use different inference methods, but new inference methods, that might require different representations, require whole new PPLs in order to use them.  To address these concerns, we have built Grappa, an extensible, general-purpose PPL compiler framework that can target a wide variety of different back-end representations from the same input language. The key technical idea behind Grappa is the use of the finally tagless approach, which allows Grappa to target one very general interface that can then be implemented in different ways to provide a wide variety of back-end representations. Grappa is open-source and available for download on Github.","Eddy Westbrook (Galois, Inc)*",westbrook@galois.com*,Languages and Systems
43,Sat,Debugging Probabilistic Programs:  Lessons from Debugging Research,"Debugging of probabilistic programs is still in its infancy. Here, we present some lessons from research in debugging of general-purpose programs, that we think hold promise for future probabilistic programming environments.  First, the idea of a reversible stepper. Single-steppers are common in programming environments, but most have fatal flaws that prevent them from becoming practical tools.  Dynamic control over the level of detail presented is a crucial facility.    More specific to probabilistic programming, is the fact that the concept of a scalar ""value"", which appears in most programming languages, isn't stable. It may take on different numerical constant values over time. We propose to replace that notion with the idea of a  probabilistic value (or probval), and propose a visualization technique to represent it in the programming environment. ",Henry Lieberman (MIT)*; Yen-Ling Kuo (MIT); Valeria Staneva (MIT),lieber@media.mit.edu*; ylkuo@mit.edu; valeria.staneva@gmail.com,Languages and Systems
51,Sat,Automated enumeration of discrete latent variables,"We describe a method to automatically marginalize out discrete latent variables in the context of two inference algorithms, Hamiltonian Monte Carlo and stochastic gradient variational inference. The method makes use of nonstandard interpretation of sample statements in the Pyro probabilistic programming language. The implementation in Pyro makes use of conditional independence information to avoid exponential growth both within batched tensors of variables, and among different variables in the program. We describe applications to mixture models and calibration of hidden Markov models.",Fritz H Obermeyer (Uber AI Labs)*; Eli Bingham (Uber AI Labs); Martin Jankowiak (Uber AI Labs); Neeraj Pradhan (Uber AI Labs); Noah Goodman (Uber AI Labs),fritz.obermeyer@gmail.com*; eli.bingham@uber.com; jankowiak@uber.com; npradhan@uber.com; ndg@uber.com,Languages and Systems
57,Sat,Towards closed-loop crowdsourcing and human computation,"Crowdsourcing and human computation integrate cognition into computationally mediated workflows. Here, we introduce Judicious, a suite of random decision generators (RDGs) that can be inserted into probabilistic programs to create closed-loop crowdsourcing and human-computation experiments. Each RDG abstracts the procurement of a human decision into a single blocking function call, thereby enabling flexible and idiomatic commingling of inference and behavioral data collection. We discuss the architecture of our Python-based implementation of Judicious and provide examples of tasks and algorithmic workflows.",Jordan W Suchow (UC Berkeley)*,suchow@berkeley.edu*,Languages and Systems
63,Sat,Transpiling Stan models to Pyro,"Stan is a probabilistic programming language (PPL) that specializes in sampling-based inference such as HMC \cite{carpenter2017stan}.  There is a rich library of models~\cite{stan-examples} written in Stan that includes the models in the BUGS project \cite{lunn2009bugs}, models from Applied Regression Modeling \cite{ARM}, etc.  This suite of models provides a benchmark for testing inference research.  Pyro is a deep universal PPL that specializes in stochastic variational inference and allows iterative testing of rich inference algorithms that may include neural networks as components \cite{bingham2017pyro}.  One of the motivations for this work is to transpile Stan models into Pyro as a testbed for further research. Moreover, with such a transpiler, researchers who build Stan models may be able to transpile their Stan models to Pyro and  modify them to leverage the strengths of Pyro (e.g. by adding neural networks to the model).",Jonathan P. Chen (Uber AI Labs)*; Eli Bingham (Uber AI Labs); Noah Goodman (Uber AI Labs); Rohit Singh (Uber AI Labs & MIT),jpchen@uber.com*; eli.bingham@uber.com; ndg@uber.com; rohitsingh@csail.mit.edu,Languages and Systems
69,Sat,Autoconj: Recognizing and Exploiting Conjugacy Without a Domain-Specific Language,"Some models enjoy a property called conjugacy that makes computation easier. Conjugacy lets us compute complete-conditional distributions, that is, the distribution of some variable conditioned on all other variables in the model. For experienced researchers, deriving conditional and marginal distributions using conjugacy relationships is straightforward. But it is also time consuming and error prone, and diagnosing bugs in these derivations can require significant effort (Cook et al., 2006). In this paper, we propose a new strategy for exploiting conditional conjugacy relationships. Unlike previous approaches (which focus on relationships between pairs of random variables) our system (which we call Autoconj) operates directly on python functions that compute log-joint distribution functions. If asked to compute a marginal distribution, Autoconj returns a python function that implements that marginal distribution’s log-joint. If asked to compute a complete conditional, it returns a python function that returns distribution objects. Autoconj can provide support for conjugacy-exploiting algorithms in any python-embedded PPL. Our hope is that, just as automatic differentiation has accelerated research in deep learning, Autoconj will accelerate the development of novel inference algorithms and modeling strategies that exploit conjugacy.",Matthew D Hoffman (Google)*; Matthew J Johnson (Google Brain); Dustin Tran (Google),mhoffman@google.com*; mattjj@google.com; trandustin@google.com,Languages and Systems
71,Sat,Omega: Probabilistic Programming with Predicates,"We introduce a method to perform inference in complex probabilistic models conditioned on predicates. Conditioning on a predicate is sufficient to encode many kinds of declarative knowledge, but recent probabilistic programming systems limit statements that can be conditioned on to avoid intractable likelihoods. We introduce a likelihood-free method of inference which replaces Boolean functions (e.g., $=, <, >, \neg, \land, \lor$) with softened counterparts defined on the unit interval.  This induces an energy function whose maximum is at values consistent with the predicate being true, but degrades continuously otherwise. We then perform inference by constructing a Markov Chain over this energy function. We build these concepts into a probabilistic programming system Omega.",Zenna Tavares (MIT)*; Javier Burroni (UMass Amherst); Edgar Minasyan (MIT); Rajesh Ranganath (New York University); Armando Solar-Lezama (MIT),zenna@mit.edu*; jburroni@cs.umass.edu; minasyan@mit.edu; rajeshr@cims.nyu.edu; asolar@csail.mit.edu,Languages and Systems
73,Sat,Information-relational semantics of the Fifth system,"This describes work in progress on the semantics of Fifth, a declarative programming language which obtains efficiency without relying on domain-specific assumptions by means of an adaptive evaluation strategy. The adaptive evaluation strategy demands a consistent way of measuring the progress of a computation in terms of the information yielded by different control paths explored in the course of attempting to evaluate it. The Fifth system’s semantics are situated at the intersection of Icon, Prolog, Radul’s and Sussman’s information propagation networks and Codd’s relational model as developed by Date et. al. which in turn places it somewhere between abstract execution systems for program analysis and existing logic programming tools, and promises to enrich declarative programming with the semantics of relations on answer sets, and may through the consistent use of relations achieve the combination of expressivity and efficiency characteristic of the APL family and its consistent reliance on arrays.","Anthony C Di Franco (University of California, Davis)*",di.franco@gmail.com*,Languages and Systems
75,Sat,Foundations of ProbProg,"Compilers for probabilistic programming languages, like all complex pieces of software, are best constructed in a modular fashion, to achieve correctness and maintainability. Establishing the correctness of their optimisations and inference algorithms is not a straightforward matter, especially because testing probabilistic programs is hard. An alternative to testing is to prove the correctness in a mathematical model of the language. Language features like soft-constraints, higher-order functions, recursion, and dynamic types, as found in e.g. Church, Anglican, Venture, WebPPL, mean that traditional probability theory based on classical measure theory does not suffice for such a mathematical model.  In this talk we will survey our recent and ongoing work developing mathematical foundations for probabilistic programing. We motivate the need for replacing probability measures with s-finite measures, to accommodate soft constraints while retaining exchangeability. We replace traditional measurable spaces with a new mathematical structure --- quasi-Borel spaces --- to accommodate higher-order functions.  These quasi-Borel spaces are expressive enough to model and prove correct idealised compilers for probabilistic programs. Moreover, using higher-order functions we exhibit modular correctness proofs reflecting the modularity of the implementation of compilers. We have employed these new mathematical foundations for probabilistic programming to prove correct complex inference algorithms like Resample-Move Sequential Monte-Carlo and to motivate the correctness of various probabilistic compiler optimisations. Moreover, we have extended our techniques to deal with recursion and dynamic types, meaning that they now apply to idealised versions of languages like Church. We conclude by discussing ongoing extensions for gradient-based methods. ",Ohad Kammar (University of Oxford); Sam Staton (University of Oxford); Matthijs Vakar (University of Oxford)*,ohad.kammar@cs.ox.ac.uk; sam.staton@cs.ox.ac.uk; matthijsvakar@gmail.com*,Languages and Systems
77,Sat,Metaprob: a minimal language for probabilistic metaprogramming,"Metaprob is a new, minimal probabilistic metaprogramming language. It is designed to facilitate research on probabilistic metaprogramming — including inference metaprograms, but also metaprograms for learning, querying, and analyzing other probabilistic programs. As with most other probabilistic programming languages, user-space code is treated as defining a generative model over possible executions of the code. However, Metaprob additionally supports first-class traces, first-class approximate inference engines, and metacircular implementation of inference. These design choices appear to have far-reaching consequences. For example, user-space code can implement many operations that were built-in to previously developed probabilistic programming langauges. For example, single-site Metropolis- Hastings inference and Dirichlet process memoization can each be implemented in under 50 lines of user-space code.",Vikash Mansinghka (MIT)*,vkm@mit.edu*,Languages and Systems
83,Sat,Hamiltonian Monte Carlo for Probabilistic Programs with Discontinuities,"Hamiltonian Monte Carlo (HMC) is the dominant statistical inference algorithm used in most popular ``first-order differentiable''  Probabilistic Programming Languages (PPLs).  HMC requires that the joint density be differentiable with respect to all latent variables. This complicates expressing some models in such languages and prohibits others. In this paper, we show how to use HMC and extensions to HMC to perform inference in probabilistic programs that contain discontinuities. To do this, we design a Simple first-order Probabilistic Programming Language (SPPL) that contains a sufficient set of language restrictions. This enables us to preserve both the statistical and syntactic interpretation of \texttt{if-else} statements in the probabilistic program, within the scope of first-order PPLs. We also provide a corresponding mathematical formalism that ensures any joint density denoted in such a language has a suitably low measure of discontinuities. ",Yuan Zhou (University of Oxford)*; Bradley J Gram-Hansen (University of Oxford); Kohn Tobias (University of Cambridge); Hongseok Yang (KAIST); Frank Wood (University of British Columbia),yuan.zhou@cs.ox.ac.uk*; bradley@robots.ox.ac.uk; kohnt@inf.ethz.ch; hongseok00@gmail.com; fwood@cs.ubc.ca,Languages and Systems
9,Sat,Uncertain from sensors to actuators,"This abstract focuses on the application of probabilistic programming to autonomous systems, where it is essential to take uncertainty into account in decision taking. For every logical step from sensors to actuators, there is existing work proposing solutions to address uncertainty. However, these solutions all focus on one part of the overall problem instead of considering the problem as a whole. As a consequence, it is not clear whether these solutions compose or not. In this abstract, we argue that probabilistic programming could precisely be the enabler to bring all the components together in a perception-decision chain that would be completely “uncertainty-aware” from sensors to actuators.",Vincent Aravantinos (fortiss GmbH)*,aravantinos@fortiss.org*,Practice
15,Sat,Custom PyMC3 nonparametric Bayesian models built on top of the scikit-learn API,"PyMC3 is a Python package for probabilistic machine learning that enables users to build bespoke models for their specific problems using a probabilistic modeling framework. However, PyMC3 lacks the steps between creating a model and reusing it with new data in production. The missing steps include: scoring a model, saving a model for later use, and loading the model in production systems. In contrast, scikit-learn which has become the standard library for machine learning provides a simple API that makes it very easy for users to train, score, save and load models in production. However, scikit-learn may not have the model for a user's specific problem. These limitations have led to the development of the open source pymc3-model library which provides a template to build bespoke PyMC3 models on top of the scikit-learn API and reuse them in production. This enables users to easily and quickly train, score, save and load their bespoke models just like in scikit-learn. This current research and development leverage the template in pymc3-models to develop custom nonparametric Bayesian models. This allows users to leverage the flexibility of nonparametric Bayesian models in a simple workflow that mimics the scikit-learn API.",Daniel Emaasit (Haystax Technology)*; David Jones (Haystax Technology),emaasit@unlv.nevada.edu*; djones@haystax.com,Practice
17,Sat,Probabilistic Search for Structured Data in BayesDB,"Databases are widespread, yet extracting relevant data can be difficult.  Data search queries written without substantial domain knowledge often return sparse or uninformative results.  This paper introduces an approach for searching multivariate data based on probabilistic programming and nonparametric Bayes.  Users specify queries in a probabilistic query language that combines standard SQL database search operators with an information theoretic ranking function called {\em predictive relevance}.  Predictive relevance can be calculated based on probabilistic programs written in a domain-specific probabilistic programming language called MultiMixture, which can represent models for high-dimensional, heterogeneously-typed data tables. These MultiMixture probabilistic programs are synthesized from data using a technique called CrossCat. The result is a flexible multivariate data search technique that applies to a broad class of information retrieval problems, which we integrate into BayesDB, a probabilistic programming platform.  This abstract demonstrates an application to a database of US colleges.",Feras Saad (MIT)*,fsaad@mit.edu*,Practice
47,Sat,Probabilistic programs for automated screening of synthetic biology logic circuits,"A key challenge in synthetic biology is characterizing the robustness of circuit designs. Variations on this problem include (i) identifying the operating regimes and environmental conditions under which they reliably produce their intended behavior; (ii) comparing the robustness of alternative implementations of the same circuit; and (iii) comparing the robustness of a single design when implemented using multiple protocols or at different wet lab facilities. This project, part of the DARPA Synergistic Discovery and Design (SD2) program, is exploring how to address this problem using probabilistic programming.",Ulrich Schaechtle (MIT)*,ulli@mit.edu*,Practice
59,Fri,Variable Elimination with Automatic Differentiation (VEAD) for Model Sensitivity Analysis,"In many real world problems, probabilistic models provide a natural framework for computing the likelihood of uncertain events. In probing the output produced by such models, it is common to ask how much does changing specific governing parameters of the probabilistic model affect the answer to inferences? Unfortunately, many programming languages can be cumbersome for encoding and reasoning over these models. Furthermore, current approaches for sensitivity analysis require numerically computing derivatives by repeatedly performing computationally expensive inferences with slight parameter perturbations, which can be computationally infeasible for large models. To overcome these limitations, and to enable efficient sensitivity analysis with respect to arbitrary model queries, e.g., P(X|Y=y), we propose to use Automatic Differentiation to extend the Probabilistic Programming Language Figaro.",Jeff Druce (Charles River Analytics)*,jdruce@cra.com*,Practice
61,Sat,Counterfactual Reasoning with Probabilistic Programming,"This manuscript describes case study for causal reasoning with probabilistic programming. It focuses on using probabilistic programming to represent models that explicitly represent mechanism, for example in the domains of physics, economics, computational ecology, epidemiology; this work uses a dynamic model of a biochemical network as an example.  This work is intended as a practicum that illustrates how Pyro allows one to easily compose these often complex models as a series of stochastic functions amenable to Bayesian inference.  Further, it shows how to combine structural causal modeling with Pyro's do-operator to perform counterfactual reasoning, a capability that to the author's knowledge has no analog in software for analyzing dynamic models of this type.","Robert Ness (Gamalon, Inc)*",robertness@gmail.com*,Practice
67,Sat,Sequential Bayesian Design of Experiments via Probabilistic Programming,"We design a new myopic strategy for a wide class of sequential design of experiment (DOE) problems, where the goal is to collect data in order to to fulfil a certain problem specific goal. Our approach, Myopic Posterior Sampling (MPS), is inspired by the classical posterior (Thompson) sampling algorithm for multi-armed bandits and leverages the flexibility of probabilistic programming and approximate Bayesian inference to address a broad set of problems. Empirically, this general-purpose strategy is competitive with more specialised methods in a wide array of DOE tasks, and more importantly, enables addressing complex DOE goals where no existing method seems applicable.",Willie Neiswanger (Carnegie Mellon University)*,willie@cs.cmu.edu*,Practice
23,Sat,Probabilistic programming allows for automated inference in factor graph models,"Our contribution is an automated procedure that allows for inference in factor graph models using only the forward model given by a single factor.  The proposed solution allows for any type of forward model to be used for the single factor, therefore it is possible to have stochastic branches and an indeterminate number of variables. In particular, this solution allows us to sample from a complex non-forward model—with a known structure—that is composed of several different simpler forward models that can be described using a probabilistic program. At the core we make use of divide & conquer SMC. The method is implemented in Birch, which is a new compiled, imperative, object-oriented, generic probabilistic programming language that allows forward models to be implemented in an efficient way. For this reason it can be used  to define simpler forward models.",Matteo Scandella (University of Bergamo)*; Lawrence Murray (Uppsala); Thomas Schön (Uppsala University),matteo.scandella@unibg.it*; lawrence.murray@it.uu.se; thomas.schon@it.uu.se,Statistics
29,Sat,Amortized Monte Carlo Integration,"Current approaches to amortizing Bayesian inference focus solely on approximating the posterior distribution.  Typically, this approximation is in turn used to calculate expectations for one or more target functions. In this paper, we address the inefficiency of this computational pipeline when the target function(s) are known upfront. To this end, we introduce a method for amortizing Monte Carlo integration. Our approach operates in a similar manner to amortized inference, but tailors the produced amortization artifacts to maximize the accuracy of the resulting expectation calculations. Furthermore, our framework allows not only for amortizing over possible datasets, but also over possible target functions.",Adam Golinski (University of Oxford)*; Yee Whye Teh (University of Oxford); Frank Wood (University of British Columbia); Tom Rainforth (University of Oxford),adamg@robots.ox.ac.uk*; y.w.teh@stats.ox.ac.uk; fwood@cs.ubc.ca; twgr@robots.ox.ac.uk,Statistics
41,Sat,Inference for mixture of finite mixture models using the Turing probabilistic programming language,"We implemented mixture models with a finite but random number of components (MFM) in the Turing probabilistic programming language so the user can test, analyse and visualise the usage of this model and compare it with its Bayesian nonparametric (BNP) counterpart.",Aled Vaghela (University of Cambridge); Maria Lomeli (Babylon Health)*; Zoubin Ghahramani (University of Cambridge),aledvaghela@gmail.com; maria.lomeli@babylonhealth.com*; zoubin@eng.cam.ac.uk,Statistics
53,Sat,Probabilistic programming with custom reversible jump and auxiliary-variable samplers,"Practitioners of Monte Carlo inference often extend a probabilistic model with auxiliary random variables to derive efficient inference algorithms. However, existing probabilistic programming systems only support generic applications of auxiliary-variable algorithms that are not programmable by the user. This abstract introduces inference programming with auxiliary variables in the probabilistic programming platform GenLite. GenLite's support for custom auxiliary variable samplers is based on two key insights that can be applied in the context of other probabilistic programming systems as well: First, that primitive probability distributions in a probabilistic programming language can be generalized to `probabilistic modules', which permit internal use of implicit auxiliary variables that are not exposed in the execution trace. Using these generalized distributions immediately gives rise to pseudomarginal algorithms when standard inference algorithms are applied to the model. Second, that it is possible to define custom transformations between model representations using probabilistic programs that define forward and backward kernels, which can themselves make explicit and/or implicit use of auxiliary variables. We illustrate these ideas in the context of auxiliary-variable techniques based on sequential Monte Carlo (SMC). We first show how to recover particle Markov chain Monte Carlo (PMMH) using a model that invokes a probabilistic module based on SMC. Next, we extend beyond the PMMH framework, and show how to combine PMMH with other inference strategies by switching between the marginal and uncollapsed representations within a second level of SMC. 

Reversible jump Markov chain Monte Carlo (RJMCMC) is a framework for that generalizes the Metropolis-Hastings framework to variable-dimension measure spaces. Probabilistic programs can define probability measures on variable-dimension spaces, and there exists a universal reversible jump MCMC algorithm based on a mixture of kernels that re-propose individual random choices in a trace. However, this universal algorithm does not allow the user to leverage their knowledge about the inference problem, which limits its reliability and utility for applications. Existing probabilistic programming systems do not make it possible to define fully-customizable fixed-dimension Metropolis-Hastings algorithms, let alone fully-customizable RJMCMC algorithms. In this abstract, we introduce probabilistic programming machinery for custom RJMCMC samplers in the context of a probabilistic language with programmable inference called GenLite. We introduce explicit programmatic representations for the generative processes and bijection used in RJMCMC. Specifically, a RJMCMC move is specified using three GenLite generative functions and a bijection on execution traces of these functions, which is written in an auxiliary DSL that automates computation of Jacobian determinants required for the acceptance probability. We show the approach applied to a canonical model of coal disaster events.",Marco Cusumano-Towner (MIT)*,imarcoam@gmail.com*,Statistics
65,Sat,Low Communication Distributed Black Box VI,"Black box variational inference (BBVI) is a popular inference method used in probabilistic programming frameworks, since it allows for efficient approximate Bayesian inference with minimal human derivations. We consider the setting where we want to perform inference given a large dataset distributed over multiple machines, in a communication-efficient manner. We provide BBVI methods for this setting, which require very low communication between machines.  We first give an embarrassingly parallel BBVI algorithm that yields an approximate solution, and then show how we can perform a post-inference procedure to refine this solution. We also release a probabilistic programming implementation.",Willie Neiswanger (Carnegie Mellon University)*,willie@cs.cmu.edu*,Statistics